/*
 * Jimmy Blaszkiewicz and Nick Metro
 * Third Panel to collect response time and ear accuracy
 */

package HearingTest;

import static HearingTest.PanelThree.*;
import static HearingTest.PanelTwo.panel3;
import static HearingTest.SoundTimer.rl;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.Timer;


/**
 *
 * @author Jimmy
 */
public class PanelThree extends JFrame
{
    static JLabel header;
    static JimButton right;
    static JimButton left;
    static final int w = HearingTest.PanelOne.w;
    static final int h = HearingTest.PanelOne.h;
    static int soundStartTime;
    static int timeNow;
    static int reactionTime;
    static int ear; //value of 1 is right ear sound
                    //value of 2 is left  ear sound
    static int correctRight;
    static int incorrectRight;
    static int correctLeft;
    static int incorrectLeft;
    static int reactionSum;
    
    static boolean[] rightSoundHeard = {false, false, false, false, false, false};
    static boolean[] leftSoundHeard = {false, false, false, false, false, false};
        
    static int[] rightTime = new int [6];
    static int[] leftTime = new int [6];
    
    static int counter = 0;
    static int counterRight = -1;
    static int counterLeft = -1;
    
    public PanelThree ()
    {
        super ("Hearing Test");
        setLayout(new FlowLayout());
        
        header = new JLabel ( "Press the button for the corresponding ear" );
        add ( header );
        
        
        header.setFont(new Font ("Baseline", Font.ROMAN_BASELINE, 16));
        
        left = new JimButton ("LEFT", w, h);
        add ( left );
        
        left.setFont(new Font ("Bold", Font.BOLD, 18) );
        
        right = new JimButton ("RIGHT", w, h);
        add ( right );
        
        right.setFont(new Font ("Bold", Font.BOLD, 18) );
        
        

        RightHandler rhandler = new RightHandler();
        right.addActionListener( rhandler );
        
        LeftHandler lhandler = new LeftHandler();
        left.addActionListener( lhandler );
        
        new SoundTimer();
    }//end panel three constructor
    
}//end panel three class

class SoundTimer{
        private final Timer timer;
        static boolean rl = false;
       
        
        static String[] sounds =  {"540R.wav", "580R.wav",
                      "240R.wav", "560R.wav", "260R.wav", 
                      "280R.wav", "240L.wav", "280L.wav", 
                      "540L.wav", "260L.wav", "580L.wav", 
                      null};
        
        
        
        public SoundTimer(){
            timer = new Timer(5000, new TimerListener());
            timer.start();
        }
        private class TimerListener implements ActionListener
        {
            public void actionPerformed(ActionEvent event)
            {
                  soundStartTime = (int) System.currentTimeMillis();
                  
                  MetroSound test = new MetroSound(sounds[counter]);
                  counter++;
                  
                  if(counterRight == 5 && rl && counterLeft != 5)
                      counterLeft++;
                  else if (counterRight != 6)
                      counterRight++;
                  
                  if(rl == true && counterRight + counterLeft == 10)
                  {
                      ReedQuantification reed = new ReedQuantification(
                              leftSoundHeard, rightSoundHeard,
                              rightTime, leftTime);
                      panel3.setVisible(false);
                      timer.stop();
                  }
                  
                  
                  if (counterRight >= 5)
                  {
                      rl = true;
                  }
                  
                  
           
                
                System.out.println(soundStartTime);
                /*
                if (counter == 12);
                {
                    panel3.dispose();
                    //idk what data goes to this or if this is needed at all
                    PanelFour panel4 = new PanelFour();
                    
                    // exit on close temporary until PanelThree finished 
                    // and PanelFour construction begins
                    panel4.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE );
                    panel4.setSize( 1000, 400);
                    panel4.setVisible( true );
                    panel4.setLocationRelativeTo(null);
                }//end if  */
                
                    
            }
            
            }
}//end of class SoundTimer

class RightHandler implements ActionListener{
    
    public void actionPerformed( ActionEvent event )
    {
        System.out.println("You pressed the right button");
        timeNow =  (int) System.currentTimeMillis();
        System.out.println(timeNow);
        reactionTime = timeNow - soundStartTime;
        System.out.println(reactionTime);
        
        //todo if(reactiontime less than 5000 and rightSound then set data
         if (reactionTime < 5000 && rl == false)
         {
             rightSoundHeard[counterRight] = true;
             rightTime[counterRight] = reactionTime;
         }
         else 
         {
             rightSoundHeard[counterRight] = false;
             rightTime[counterRight] = 5000;
         }

    }//end actionPerformed Method
    
}//end RightHandler
class LeftHandler implements ActionListener{
    
    public void actionPerformed( ActionEvent event )
    {
        System.out.println("You pressed the left button");
        timeNow =  (int) System.currentTimeMillis();
        System.out.println(timeNow);
        reactionTime = timeNow - soundStartTime;
        System.out.println(reactionTime);
        if (reactionTime < 5000 && rl)
         {
             leftSoundHeard[counterLeft] = true;
             leftTime[counterLeft] = reactionTime;
         }
        else
        {
            leftSoundHeard[counterLeft] = false;
            rightTime[counterLeft] = 5000;
        }
    }//end actionPerformed Method
}//end LeftHandler
