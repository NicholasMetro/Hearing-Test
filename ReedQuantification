package HearingTest;

import javax.swing.JFrame;

public class ReedQuantification 
{
  static int [] leftToneNumber = new int [6]; 
  //int array for ints from 1-6 representing left ear tones in order from least difficult to most difficult 
  static int [] rightToneNumber = new int [6];
   //int array for ints from 1-6 representing right ear tones in order from least difficult to most difficult 
  
  //true or false boolean array for whether or not the tone was heard
  static boolean[] leftSoundHeard = new boolean [6];
  static boolean [] rightSoundHeard = new boolean [6];
  
  //int array for the time it took for the tone to be heard (0-5000 ms)
  static int [] leftTime = new int [6];
  static int [] rightTime = new int [6];
  
  //int array  for the difficulty of the tone (how low the decibels it was/how high the frequency) since the tones are in order from least difficult to most difficult, they =  the respective tone's #
  static int [] leftDifficulty = leftToneNumber;
  static int [] rightDifficulty = rightToneNumber;
  
  // int array for the timescore
  static int [] timeScore = { 1, 2, 3 };
  
  static int heardScore = 10;
  
  // doubles for the composite right and left scores
  static int leftScore = 0;
  static int rightScore = 0;
  
  static int finalLeftScore;
  static int finalRightScore;
  
  //int for the differential between the two scores
  static int rightVsLeft;
  static double rightVsLeftPercentage;
  
  static int finalRightVsLeft;
  static double finalRightVsLeftPercentage;
  
  
  static double totalPossible = 180;
  
  
  public ReedQuantification(boolean[] soundHeardLeft, 
          boolean[] soundHeardRight, int[] timeRight, int[] timeLeft) //start of constructor
    {
        leftSoundHeard = soundHeardLeft;
        rightSoundHeard = soundHeardRight;
        leftTime = timeLeft;
        rightTime = timeRight;
        quantify();
    }//end of constructor
  public void quantify()
  {
      //Quantifying Left Ear Results
              for (int i = 0; i < leftToneNumber.length; i++)
              {
                  if (leftSoundHeard[i] == true)
                  {
                      if (leftTime[i] > 0 && leftTime[i] <= 1000)
                      {
                        leftScore = leftScore + (heardScore * timeScore[2]); //leftScore = leftScore + difficulty*3
                      }//end of if
                      if (leftTime[i] > 1000 && leftTime [i] <= 2000)
                      {
                          leftScore = leftScore + (heardScore * timeScore[1]); //leftScore = leftScore + difficulty*2
                      }//end of if
                      if (leftTime [i] > 2000 )
                      {
                          leftScore  = leftScore + (heardScore * timeScore [0]); //leftScore = leftScore + difficulty*1 
                      } //end of if
                  }//end of if
              }//end of for
              //Quantifying Right Ear Results  
              for (int q = 0; q < rightToneNumber.length; q++)
              {
                  if (rightSoundHeard[q] == true)
                  {
                      if (rightTime[q] > 0 && rightTime[q] <= 10000)
                      {
                        rightScore = rightScore + (heardScore * timeScore[2]); //rightScore = rightScore + difficulty*3
                      }//end of if
                      if (rightTime[q] > 10000 && rightTime [q] <= 20000)
                      {
                          rightScore = rightScore + (heardScore * timeScore[1]); //rightScore = rightScore + difficulty*2
                      }//end of if
                      if (rightTime [q] > 20000 )
                      {
                          rightScore  = rightScore + (heardScore * timeScore [0]); //rightScore = rightScore + difficulty*1
                      }//end of if
                  }//end of if
               }//end of for
               //Comparing Left and Right results
               if (rightScore == leftScore)
               {
                   rightVsLeft = 0;
               }//end of if
                   else if (rightScore > leftScore)
                           {
                             rightVsLeft = rightScore - leftScore;
                             rightVsLeftPercentage = ((rightScore/totalPossible) - (leftScore/totalPossible));
                           }//end of if
                   else 
                           {
                            rightVsLeft = leftScore - rightScore;
                            rightVsLeftPercentage = ((leftScore/totalPossible) - (rightScore/totalPossible));
                           }//end of else

               finalLeftScore = leftScore;
               finalRightScore = rightScore;
               
               finalRightVsLeft = rightVsLeft;
               finalRightVsLeftPercentage = rightVsLeftPercentage;
               
               PanelFour panel = new PanelFour (finalLeftScore, finalRightScore, finalRightVsLeft, finalRightVsLeftPercentage);
               
               panel.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE);
               panel.setSize( 1000, 400);
               panel.setVisible( true );
               panel.setLocationRelativeTo(null);
               
  }
}//end of class
