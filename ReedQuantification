
package hearingtest;

public class ReedQuantification 
{
  int [] leftToneNumber = new int [15]; 
  //int array for ints from 1-15 representing left ear tones in order from least difficult to most difficult 
  int [] rightToneNumber = new int [15];
   //int array for ints from 1-15 representing right ear tones in order from least difficult to most difficult 
  
  //true or false boolean arrays for whether or not the tone was heard
  boolean[] leftSoundHeard = new boolean [15];
  boolean [] rightSoundHeard = new boolean [15];
  
  //int arrays for the time it took for the tone to be heard (0-5000 ms)
  int [] leftTime = new int [15];
  int [] rightTime = new int [15];
  
  //int arrays  for the difficulty of the tone (how low the decibels it was/how high the frequency) since the tones are in order from least difficult to most difficult, they =  the respective tone's #
  int [] leftDifficulty = leftToneNumber;
  int [] rightDifficulty = rightToneNumber;
  
  // int array for the timescore
  int [] timeScore = { 3, 2, 1 };
  
  // ints for the composite right and left scores
  int leftScore = 0;
  int rightScore = 0;
  
  //int for the differential between the two scores
  int rightVsLeft;
  
  public ReedQuantification() //start of constructor
          {
              //Quantifying Left Ear Results
              for (int i = 0; i < leftToneNumber.length; i++)
              {
                  if (leftSoundHeard[i] == true)
                  {
                      if (leftTime[i] <= 1000)
                      {
                        leftScore = leftScore + (leftDifficulty[i] * timeScore[2]); //leftScore = leftScore + difficulty*3
                      }//end of if
                      if (leftTime[i] > 1000 && leftTime [i] <= 2000)
                      {
                          leftScore = leftScore + (leftDifficulty[i] * timeScore[1]); //leftScore = leftScore + difficulty*2
                      }//end of if
                      if (leftTime [i] > 2000 )
                      {
                          leftScore  = leftScore + (leftDifficulty[i] * timeScore [0]); //leftScore = leftScore + difficulty*1 
                      } //end of if
                  }//end of if
              }//end of for
              //Quantifying Right Ear Results  
              for (int q = 0; q < rightToneNumber.length; q++)
              {
                  if (rightSoundHeard[q] == true)
                  {
                      if (rightTime[q] <= 1000)
                      {
                        rightScore = rightScore + (leftDifficulty[i] * timeScore[2]); //rightScore = rightScore + difficulty*3
                      }//end of if
                      if (rightTime[q] > 1000 && rightTime [q] <= 2000)
                      {
                          rightScore = rightScore + (leftDifficulty[i] * timeScore[1]); //rightScore = rightScore + difficulty*2
                      }//end of if
                      if (rightTime [q] > 2000 )
                      {
                          rightScore  = rightScore + (rightDifficulty[i] * timeScore [0]); //rightScore = rightScore + difficulty*1
                      }//end of if
                  }//end of if
               }//end of for
               //Comparing Left and Right results
               if (rightScore == leftScore)
               {
                   rightVsLeft = 0;
               }//end of if
                   else if (rightScore > leftScore)
                           {
                             rightVsLeft = rightScore - leftScore;
                             boolean rightIsGreater = true; 
                           }//end of if
                   else 
                           {
                            rightVsLeft = leftScore - rightScore;
                            boolean leftIsGreater = true;
                           }//end of else
              }//end of constructor
          }//end of class

